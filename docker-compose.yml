version: '3.8'

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    expose:
      - "3000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/image_hosting
      - REDIS_URL=redis://redis:6379
      - UPLOAD_DIR=/app/uploads
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - MAX_FILE_SIZE=10485760
      - ALLOWED_MIME_TYPES=image/jpeg,image/png,image/webp,image/gif
      - MAX_IMAGE_DIMENSION=4096
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=3600
      - DEFAULT_QUOTA_BYTES=1073741824
      - VIRUS_SCAN_ENABLED=false
      - RUST_LOG=info
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=image_hosting
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - app
    restart: unless-stopped
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    environment:
      - DOMAIN=api.i.ex.tech
      - EMAIL=your-email@example.com  # Change this to your email
    entrypoint: |
      /bin/sh -c '
      # Wait for nginx to be ready
      sleep 30
      
      # Check if certificate already exists
      if [ ! -f /etc/letsencrypt/live/$$DOMAIN/fullchain.pem ]; then
        echo "Obtaining SSL certificate for $$DOMAIN..."
        certbot certonly --webroot --webroot-path=/var/www/certbot --email $$EMAIL --agree-tos --no-eff-email -d $$DOMAIN
      fi
      
      # Start renewal daemon
      trap exit TERM
      while :; do
        certbot renew --quiet
        sleep 12h & wait $${!}
      done
      '
    depends_on:
      - nginx

  ssl-init:
    image: certbot/certbot:latest
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    environment:
      - DOMAIN=api.i.ex.tech
      - EMAIL=your-email@example.com  # Change this to your email
    command: |
      sh -c '
      if [ ! -f /etc/letsencrypt/live/$$DOMAIN/fullchain.pem ]; then
        echo "Creating dummy certificate for $$DOMAIN..."
        mkdir -p /etc/letsencrypt/live/$$DOMAIN
        openssl req -x509 -nodes -newkey rsa:2048 -days 1 \
          -keyout /etc/letsencrypt/live/$$DOMAIN/privkey.pem \
          -out /etc/letsencrypt/live/$$DOMAIN/fullchain.pem \
          -subj "/CN=$$DOMAIN"
        echo "Dummy certificate created"
      fi
      '
    profiles:
      - ssl-init

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  certbot_certs:
  certbot_www:
